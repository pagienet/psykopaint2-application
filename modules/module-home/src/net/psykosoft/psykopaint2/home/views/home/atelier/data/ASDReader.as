//Generated by Prefab3D 2.146, Mon Oct 14 09:51:07 GMT+0200 2013. www.closier.nl/prefab
package net.psykosoft.psykopaint2.home.views.home.atelier.data {
	import away3d.core.base.Geometry;
	import away3d.core.base.CompactSubGeometry;
	import flash.utils.ByteArray;
	import flash.utils.Endian;

	public class ASDReader
	{
		private static const MAGIC:String = "ASD";
		private static var _revision:Number;

		public static function validateHeader(ba:ByteArray):uint
		{
			ba.inflate();
			ba.endian = Endian.BIG_ENDIAN;
			ba.position = 0;
			var magic:String = ba.readUTFBytes(3);
			var v:Number = ba.readByte();
			_revision = ba.readByte();
			if(magic != MAGIC || v+_revision>3)
				throw new Error("Incorrect asd file. Use latest outputs from Prefab! (asd 1.2 or higher)");

			return ba.readUnsignedInt();
		}

		public static function decodeGeometry(ba:ByteArray):Geometry
		{
			var filelen:uint = validateHeader(ba);
			var id:uint = ba.readUnsignedInt();
			var blockLen:Number = ba.readUnsignedInt();
			var geom:Geometry = new Geometry();
			if(id == 9){
				var subgCount:uint = ba.readUnsignedInt();
				var indices:Vector.<uint>;
				var vertexData:Vector.<Number>;
				var subGeom:CompactSubGeometry;

				for (var i:uint =  0; i<subgCount; i++) {
					ba.readByte();
					subGeom = new CompactSubGeometry();
					indices = readUnsignedShort(ba);
					subGeom.updateIndexData(indices);
					vertexData = readFloats(ba);
					subGeom.updateData(vertexData);
					geom.addSubGeometry(subGeom);
				}

			} else {
				abort();
			}
			return geom;
		}

		public static function decodeVector(ba:ByteArray):Vector.<Number>
		{
			var filelen:uint = validateHeader(ba);
			var id:uint = ba.readUnsignedInt();
			var blockLen:Number = ba.readUnsignedInt();
			var type:uint = ba.readUnsignedInt();
			var vn:Vector.<Number>;
			if(type == 0){
				vn = readFloats(ba);
			} else {
				abort();
			}
			return vn;
		}

		private static function abort():void
		{
			throw new Error("Incorrect asd file. Use latest outputs from Prefab!");
		}

		private static function readUnsignedShort(ba:ByteArray):Vector.<uint>
		{
			var len:uint = ba.readUnsignedInt()*.5;
			if(len<1) return null;
			var i:uint;
			var v:Vector.<uint> = new Vector.<uint>(len);
			while(i<len){
				v[i] = ba.readUnsignedShort();
				i++;
			}
			return v;
		}

		private static function readFloats(ba:ByteArray):Vector.<Number>
		{
			var len:uint = ba.readUnsignedInt()/4;
			if(len<1) return null;
			var i:uint = 0;
			var v:Vector.<Number> = new Vector.<Number>(len);
			while(i<len){
				v[i] = ba.readFloat();
				i++;
			}
			return v;
		}

	}
}