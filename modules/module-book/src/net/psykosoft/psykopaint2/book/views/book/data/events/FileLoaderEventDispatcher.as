package net.psykosoft.psykopaint2.book.views.book.data.events{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.utils.ByteArray;	import net.psykosoft.psykopaint2.book.views.book.data.events.AssetLoadedEvent;		public class FileLoaderEventDispatcher extends EventDispatcher	{		public function FileReaderEventDispatcher():void{}				protected function dispatchError(msg:String, onError:Function = null, customData:Object = null):void		{			var ale:AssetLoadedEvent = new AssetLoadedEvent(AssetLoadedEvent.ASSET_LOAD_ERROR);			ale.message = msg;			ale.customData = customData; 			dispatchEvent(ale);					}		protected function dispatchBinarydata(content:ByteArray, onBinaryLoaded:Function = null, customData:Object = null):void		{			var ale:AssetLoadedEvent = new AssetLoadedEvent(AssetLoadedEvent.ASSET_BINARY_LOADED);			ale.data = content;			ale.customData = customData;			ale.message = "bytes loaded";			if(onBinaryLoaded != null){				onBinaryLoaded(ale);			} else {				dispatchEvent(ale);			}		} 		protected function dispatchLoaded(content:*, onComplete:Function = null, customData:Object = null):void		{			var ale:AssetLoadedEvent = new AssetLoadedEvent(AssetLoadedEvent.ASSET_LOADED);			ale.data = content;			ale.customData = customData;			ale.message = "file loaded";			if(onComplete != null){				onComplete(ale);			} else {				dispatchEvent(ale);			}		}				protected function dispatchProgress(bytesLoaded:Number, bytesTotal:Number):void		{			var ale:AssetLoadedEvent = new AssetLoadedEvent(AssetLoadedEvent.ASSET_LOAD_PROGRESS);			ale.percent = bytesLoaded/bytesTotal;			ale.message = "Loaded " + bytesLoaded + " of " + bytesTotal;			dispatchEvent(ale);		}				public function addOnLoadComplete(listener:Function):void		{			addEventListener(AssetLoadedEvent.ASSET_LOADED, listener, false, 0, false);		}		public function removeOnLoadComplete(listener:Function):void		{			removeEventListener(AssetLoadedEvent.ASSET_LOADED, listener, false);		}		public function addOnLoadError(listener:Function):void		{			addEventListener(AssetLoadedEvent.ASSET_LOAD_ERROR, listener, false, 0, false);		}		public function removeOnLoadError(listener:Function):void		{			removeEventListener(AssetLoadedEvent.ASSET_LOAD_ERROR, listener, false);		}		}}