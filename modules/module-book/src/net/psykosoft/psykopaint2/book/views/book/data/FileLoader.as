package net.psykosoft.psykopaint2.book.views.book.data{	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.EventDispatcher;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.system.LoaderContext;	import flash.system.ApplicationDomain;	import flash.utils.ByteArray;  	import net.psykosoft.psykopaint2.book.views.book.data.events.AssetLoadedEvent;	import net.psykosoft.psykopaint2.book.views.book.data.events.FileLoaderEventDispatcher;	 	public final class FileLoader extends FileLoaderEventDispatcher	{		private const TXT:uint = 0;		private const IMAGE:uint = 1;		private const BINARY:uint = 2;		private const SWF:uint = 3;				private var _loader:Object;		private var _url:String;		private var _type:uint;		private var _queue:Vector.<QueuedAsset>;		private var _currentOnComplete:Function;		private var _currentOnError:Function;		private var _currentOnBinaryLoaded:Function;		private var _currentData:Object;		         public function loadTextFile(url:String, onComplete:Function = null, onError:Function = null, data:Object = null):void		{			if(_loader){				addToQueue(url, TXT, onComplete, onError, data);			} else {				loadFile(url, TXT, onComplete, onError, data);			}        		}				public function loadImage(url:String, onComplete:Function = null, onError:Function = null, data:Object = null):void		{			if(_loader){				addToQueue(url, IMAGE, onComplete, onError, data);			} else {				loadFile(url, IMAGE, onComplete, onError, data);			}		}		public function loadSwf(url:String, onComplete:Function = null, onError:Function = null, data:Object = null):void		{			if(_loader){				addToQueue(url, SWF, onComplete, onError, data);			} else {				loadFile(url, SWF, onComplete, onError, data);			}		}		public function loadBinary(url:String, onComplete:Function = null, onError:Function = null, data:Object = null, onBinaryLoaded:Function = null):void		{			if(_loader){				addToQueue(url, BINARY, onComplete, onError, data, onBinaryLoaded);			} else {				loadFile(url, BINARY, onComplete, onError, data, onBinaryLoaded);			}		} 		private function loadFile(url:String, type:uint, onComplete:Function = null, onError:Function = null, data:Object = null, onBinaryLoaded:Function = null):void		{			_type = type; 			var indexof:int = url.indexOf("//");			if(indexof != -1){				var regExp:RegExp = new RegExp("//", "g");				var subString:String = url.substring(8, url.length);				subString = subString.replace(regExp, "/");				url = url.substring(0, 8) + subString;			}			_url = url; 			_currentOnComplete = onComplete;			_currentOnError =  errorHandler;			_currentOnBinaryLoaded = onBinaryLoaded;			_currentData = data;			if(_type == TXT || _type == BINARY){				var urlLoader:URLLoader = new URLLoader();				if(_type == TXT){					urlLoader.dataFormat = URLLoaderDataFormat.TEXT;					urlLoader.addEventListener(Event.COMPLETE, completeHandler);				} else {					urlLoader.dataFormat = URLLoaderDataFormat.BINARY;					urlLoader.addEventListener(Event.COMPLETE, binaryCompleteHandler);				}				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);				urlLoader.addEventListener(ProgressEvent.PROGRESS, progressHandler);				_loader = urlLoader;			} else if(_type == IMAGE || _type == SWF){				var loader:Loader = new Loader();				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);           	 			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);				loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressHandler);				_loader = loader;			}			var request:URLRequest = new URLRequest(_url);			if(_type == SWF){				var context:LoaderContext = new LoaderContext(false);				context.applicationDomain = ApplicationDomain.currentDomain;				context.checkPolicyFile = false;				context.allowCodeImport = true;				_loader.load(request, context);			} else {				_loader.load(request);			}					}				private function addToQueue(url:String, type:uint, onComplete:Function = null, onError:Function = null, data:Object = null, onBinaryLoaded:Function = null):void		{			if(!_queue) _queue = new Vector.<QueuedAsset>(); 			var qa:QueuedAsset = new QueuedAsset();			qa.url = url;			qa.type = type;			qa.completeHandler = onComplete;			qa.errorHandler = onError;			qa.binaryLoadedHandler = onBinaryLoaded;			qa.data = data;			_queue.push(qa);		}				private function clearListeners():void		{			if(_type == TXT ){				URLLoader(_loader).removeEventListener(Event.COMPLETE, completeHandler);				URLLoader(_loader).removeEventListener(IOErrorEvent.IO_ERROR, errorHandler);				URLLoader(_loader).removeEventListener(ProgressEvent.PROGRESS, progressHandler);							} else if(_type == IMAGE || _type == SWF){								Loader(_loader).contentLoaderInfo.removeEventListener(Event.COMPLETE, completeHandler);        	 			Loader(_loader).contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, errorHandler);				Loader(_loader).contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler);									} else if(_type == BINARY ){				Loader(_loader).contentLoaderInfo.removeEventListener(Event.COMPLETE, completeHandler);				Loader(_loader).contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, errorHandler);				Loader(_loader).contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler);			}			_loader = null;			if(_queue && _queue.length>0){				var qa:QueuedAsset = _queue.shift(); 				if(qa.type == TXT){					loadTextFile(qa.url, qa.completeHandler, qa.errorHandler, qa.data);				} else if(qa.type == BINARY){					loadBinary(qa.url, qa.completeHandler, qa.errorHandler, qa.data, qa.binaryLoadedHandler);				} else if(qa.type == SWF){					loadSwf(qa.url, qa.completeHandler, qa.errorHandler, qa.data);				} else {					loadImage(qa.url, qa.completeHandler, qa.errorHandler, qa.data);				}				qa = null;			} 		}		private function binaryCompleteHandler(e:Event):void		{			URLLoader(_loader).removeEventListener(Event.COMPLETE, binaryCompleteHandler);			URLLoader(_loader).removeEventListener(IOErrorEvent.IO_ERROR, errorHandler);			URLLoader(_loader).removeEventListener(ProgressEvent.PROGRESS, progressHandler);						var context:LoaderContext = new LoaderContext(false);			context.applicationDomain = ApplicationDomain.currentDomain;			context.checkPolicyFile = false;			context.allowCodeImport = true;			var ba:ByteArray = ByteArray(URLLoader(_loader).data);			_loader = null;			if(hasEventListener(AssetLoadedEvent.ASSET_BINARY_LOADED) || _currentOnBinaryLoaded != null){				dispatchBinarydata(ba, _currentOnBinaryLoaded, _currentData);			}			var loader:Loader = new Loader();			_loader = loader;			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);			loader.loadBytes(ba, context);		}		        private function completeHandler(e:Event):void		{			var ale:AssetLoadedEvent = new AssetLoadedEvent(AssetLoadedEvent.ASSET_LOADED);			var content:*;   			if(_type == TXT){				var urlLoader:URLLoader = URLLoader(_loader);				var xml:XML = new XML(String(urlLoader.data));				content = xml;			} else if(_type == IMAGE){				var image:Bitmap = Bitmap(_loader.content);				content = image.bitmapData;							} else {				content = _loader.content;			} 			dispatchLoaded(content, _currentOnComplete, _currentData);			clearListeners();		}		private function errorHandler(e:Event):void 		{			dispatchError("loading "+_url+" failed", _currentOnError, _currentData);			clearListeners();		}	 		private function progressHandler(e:ProgressEvent):void		{			dispatchProgress(e.bytesLoaded, e.bytesTotal);		}			 	}}internal class QueuedAsset{	public var type:uint;	public var url:String;	public var completeHandler:Function;	public var errorHandler:Function;	public var binaryLoadedHandler:Function;	public var data:Object;}